<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>愿望清单</title>
      <link href="/2023/05/08/%E6%84%BF%E6%9C%9B%E6%B8%85%E5%8D%95/"/>
      <url>/2023/05/08/%E6%84%BF%E6%9C%9B%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h3 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h3><ul><li><input disabled type="checkbox"> 学习 Qt 基础知识，并能够在之后做项目的过程中写 Qt 进行辅助开发。</li><li><input disabled type="checkbox"> 学会移植 FreeRTOS，并能了解 FreeRTOS 内核。</li><li><input disabled type="checkbox"> 嵌入式 Linux 基础内容（韦东山免费教程）。</li><li><input disabled type="checkbox"> 算法进阶：数据结构，图论，动态规划，数学。</li><li><input disabled type="checkbox"> 把《自动控制原理》学习完。</li></ul><h3 id="愿望清单"><a href="#愿望清单" class="headerlink" title="愿望清单"></a>愿望清单</h3><ul><li><input disabled type="checkbox"> 制作一个 FOC 驱动器。</li><li><input disabled type="checkbox"> 制作一个简易的 CPU。</li><li><input disabled type="checkbox"> 制作一个迷你的 Linux 小电脑。</li><li><input disabled type="checkbox"> 吉他学会弹奏《天空之城》。</li><li><input disabled type="checkbox"> 画一幅香风智乃的画。</li></ul><h3 id="博客补完计划"><a href="#博客补完计划" class="headerlink" title="博客补完计划"></a>博客补完计划</h3><ul><li><input disabled type="checkbox"> 加入 <strong>关于</strong> 部分。</li><li><input disabled type="checkbox"> 在 <strong>摸鱼</strong> 中加一些小控件：<ul><li><input disabled type="checkbox"> 一些小游戏</li><li><input disabled type="checkbox"> CSS 控件（金属材质的标签，太阳系等）</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt学习笔记</title>
      <link href="/2023/05/07/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/07/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>持续更新中 ~~~</p><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><h4 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h4><p>打开 Qt Creator 后，创建新项目：</p><ol><li><p>选择 Application -&gt;Qt Widgets Application</p></li><li><p>指定项目地址和名称</p></li><li><p>Build System: qmake</p></li><li><p>Details</p><p>类信息，在这里面有三个基类供我们选择：</p><ul><li>QWidget：最简单的空白窗口。</li><li>QMainWindow：主窗口（包含了标题栏，菜单栏等）。</li><li>QDialog：对话框。</li></ul><p>下图展示了三个基类的继承关系</p><p><img src="/2023/05/07/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230505203809254.png" alt="image-20230505203809254"></p></li><li><p>Kits：我这里选择 MinGW。</p></li><li><p>Summary：这里可以选择版本控制系统，可以不选择。</p></li></ol><h4 id="1-2-文件结构介绍"><a href="#1-2-文件结构介绍" class="headerlink" title="1.2 文件结构介绍"></a>1.2 文件结构介绍</h4><p>项目创建完毕后，会生成一个 <code>.pro</code> 的项目文件和一些 <code>.h, .cpp</code> 的文件。</p><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span><span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"><span class="comment">//main程序入口  argc命令行变量的数量  argv命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//应用程序对象，有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//实例化对象widget</span></span><br><span class="line">    Widget w;</span><br><span class="line">    <span class="comment">//显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//应用程序进入消息循环</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>widget.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//宏，允许类中使用信号和槽的机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><p><strong>widget.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)<span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-命名规范"><a href="#1-3-命名规范" class="headerlink" title="1.3 命名规范"></a>1.3 命名规范</h4><ul><li>类名：首字母大写，单词和单词之间首字母大写。</li><li>函数名  变量名称：首字母小写，单词和单词直接首字母大写。</li></ul><h4 id="1-4-常用快捷键"><a href="#1-4-常用快捷键" class="headerlink" title="1.4 常用快捷键"></a>1.4 常用快捷键</h4><ul><li>注释ctrl + &#x2F;</li><li>运行    ctrl + r</li><li>编译    ctrl + b</li><li>字体缩放    ctrl + 鼠标滚轮</li><li>整行移动    ctrl + shift + ↑ &#x2F; ↓</li><li>帮助文档    F1</li><li>自动对齐    ctrl + i</li><li>同名之间的 .h 和 .cpp 切换    F4</li></ul><h3 id="2-小试牛刀"><a href="#2-小试牛刀" class="headerlink" title="2. 小试牛刀"></a>2. 小试牛刀</h3><h4 id="2-1-窗口操作"><a href="#2-1-窗口操作" class="headerlink" title="2.1 窗口操作"></a>2.1 窗口操作</h4><p>这一节介绍一些窗口操作的 API。</p><p>在对窗口的属性进行设置时，往往在构造函数中完成。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重置窗口大小</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">//固定窗口大小</span></span><br><span class="line"><span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">//设置窗口标题</span></span><br><span class="line"><span class="built_in">setWindowTitle</span>(<span class="string">&quot;hello_Qt&quot;</span>);</span><br></pre></td></tr></table></figure><p>这些方法都是继承父类得来的，直接调用即可，如果想进一步增强可读性，可添加 this 指针，但在类方法调用的过程中，编译器已经为我们默认添加了 this 指针。</p><h4 id="2-2-QPushButton"><a href="#2-2-QPushButton" class="headerlink" title="2.2 QPushButton"></a>2.2 QPushButton</h4><p>该类表示按钮，是十分常用的控件之一，仍然实在构造函数中创建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)<span class="comment">//构造函数</span></span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    QPushButton *btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是错误的，<code>show()</code> 方法以顶层方式弹出窗口空间，因此会在另一个窗口中弹出按钮控件。现在要让 <code>btn</code> 依赖于 <code>QWidget</code> 窗口，需要把 <code>btn</code> 的父类对象设置为 <code>QWidget</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)<span class="comment">//构造函数</span></span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    QPushButton *btn1 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn1-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn1-&gt;<span class="built_in">setText</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    QPushButton *btn2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;btn2&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面通过两种方法创建按钮控件，都是可行的。</p><p> <strong>设置相关属性</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置父亲</span></span><br><span class="line">btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//设置按钮名称</span></span><br><span class="line">btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">//移动按钮位置</span></span><br><span class="line">btn-&gt;<span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h6 id="flag1-triangular-flag-on-post"><a href="#flag1-triangular-flag-on-post" class="headerlink" title="flag1 :triangular_flag_on_post:"></a>flag1 :triangular_flag_on_post:</h6><p>自己封装一个按钮控件，继承于 QPushButton，并实现一些动画效果（弹跳等）。</p><h4 id="2-3-对象树"><a href="#2-3-对象树" class="headerlink" title="2.3 对象树"></a>2.3 对象树</h4><p>在每次创建一个对象时，都要指定一个父亲，而 <code>QObject</code> 是最顶端的对象，所有的子类对象都是由 <code>QObject</code> 派生而来。</p><ul><li>构造函数：由上往下执行，先执行 <code>QObject</code> 的构造函数，再执行其子类的，不断执行下去。</li><li>析构函数：父类在执行析构函数时需要释放自身，这是先会检查其属下的子类对象是否被释放，因此由上往下检查子类对象，而由下往上不断释放类对象。</li></ul><h4 id="2-4-坐标系"><a href="#2-4-坐标系" class="headerlink" title="2.4 坐标系"></a>2.4 坐标系</h4><p>Qt 中的坐标系以左上角为原点，向右为 x 正方向；向下为 y 正方向。</p><h4 id="2-5-信号和槽"><a href="#2-5-信号和槽" class="headerlink" title="2.5 信号和槽"></a>2.5 信号和槽</h4><h5 id="2-5-1-基本概念"><a href="#2-5-1-基本概念" class="headerlink" title="2.5.1 基本概念"></a>2.5.1 基本概念</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><p>该函数传入四个参数：信号的发送者（类实例对象），发送的信号（函数地址），信号的接收者（类实例对象），处理的槽函数（函数地址）。</p><p>上面的代码则实现了点击按钮控件关闭窗口的连接函数。</p><p><strong>松散耦合</strong></p><p>参数的前两者和后两者没有什么关联，是松散的，但通过 connect 函数耦合起来。</p><p><strong>click &amp; clicked</strong></p><p>初学者可能对这两个函数有困惑。就我自己的理解，click 表示的是按钮的点击动作，而 clicked 是执行了按钮点击函数触发的函数。因此点击按钮，出发的是 clicked 函数，如果上面的 clicked 函数写成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::click, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><p>则没有反应。</p><p>假设现在有两个按键，我们对其建立 connect 连接来更好地理解两个函数的区别。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn1, &amp;QPushButton::clicked, btn2, &amp;QPushButton::click);</span><br><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><p>上面代码的逻辑是，btn1 出发点击事件，会导致 btn2 点击动作的执行，而 btn2 点击动作的执行又导致 btn2 点击事件的发生，进而触发窗口关闭函数的执行。</p><p>最终的效果是，无论点击哪一个按键，窗口都会关闭。</p><h5 id="2-5-2-自定义信号和槽"><a href="#2-5-2-自定义信号和槽" class="headerlink" title="2.5.2 自定义信号和槽"></a>2.5.2 自定义信号和槽</h5><ul><li>自定义信号：返回 void；需要声明，不需要实现；可以有参数，可以重载。</li><li>自定义槽函数：返回 void，需要声明，也需要实现；可以有参数，可以重载。</li></ul><p>出发信号关键字：<code>emit</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">emit <span class="title">signal</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h6 id="小案例实战"><a href="#小案例实战" class="headerlink" title="小案例实战"></a><strong>小案例实战</strong></h6><p>项目放在 tc_st 中</p><p>现在实现一个小案例，分别创建 <code>Teacher</code> 和 <code>Student</code> 对象，实现以下功能：</p><ul><li><code>Teacher</code> 发出 <code>hungry</code> 信号，<code>Student</code> 响应 <code>treat</code> 信号。</li><li>实现信号和槽的重载。</li></ul><p>信号和槽的重载后，这样写便会出现二义性，编译无法通过：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(tc, &amp;Teacher::hungry, st, &amp;Student::treat);</span><br></pre></td></tr></table></figure><p>需要根据函数重载的特性定义两个指针变量，指向我们需要的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (Teacher::*tcSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line"><span class="built_in">void</span> (Student::*stSignal)(Qstring) = &amp;Student::treat;</span><br><span class="line"><span class="built_in">connect</span>(tc, tcSignal, st, stSignal);</span><br></pre></td></tr></table></figure><p>槽函数执行时，其接收的参数通过信号传入，具体内容见拓展知识。</p><h5 id="2-5-3-拓展知识"><a href="#2-5-3-拓展知识" class="headerlink" title="2.5.3 拓展知识"></a>2.5.3 拓展知识</h5><ul><li><p>信号可以连接信号。</p></li><li><p>一个信号可以连接多个槽函数。</p></li><li><p>多个信号可以连接同一个槽函数。</p></li><li><p><strong>信号与槽的参数必须一一对应。</strong></p></li><li><p>信号的参数个数可以多余槽的参数个数。</p><p>对后面两条内容做点说明，槽函数接收的参数，对于信号函数来说在前面必须有相同的对应的参数，而信号函数后面参数多了也没事。对于一一对应的参数，传入信号函数时会被自动传入到槽中。</p></li></ul><p><strong>Qt4 版本的信号与槽</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sz, <span class="built_in">SIGNAL</span>(<span class="built_in">hungry</span>()), tc, <span class="built_in">SLOT</span>(<span class="built_in">treat</span>()));</span><br></pre></td></tr></table></figure><h5 id="2-5-4-Lambda表达式"><a href="#2-5-4-Lambda表达式" class="headerlink" title="2.5.4 Lambda表达式"></a>2.5.4 Lambda表达式</h5><p> 这玩意长的很阴间，刚开始怎么都看不懂，但是现在看看其实很简单的一个小东西。</p><p>最简单的 Lambda 表达式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]()&#123;&#125;();</span><br></pre></td></tr></table></figure><p>当然，上述表达式什么也做不了，现在看看它的语法形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture](params) opt -&gt;ret &#123;body;&#125;();</span><br></pre></td></tr></table></figure><ul><li><p><code>[capture]</code> 对 lambda 表达式所在作用域变量的捕获。</p><p>[]：不捕获任何变量，[&#x3D;]：表示按值捕获变量，[&amp;]：按引用捕获变量</p><p>[&#x3D;, &amp;x]：按值捕获变量，但对于 x 是按引用捕获。</p></li><li><p><code>(params)</code>表示 lambda 的参数。</p></li><li><p><code>opt</code> 表示 lambda 的选项，比如 mutable，表示变量可以修改，如果不声明，则变量无法在 lambda 表达式中被修改。</p></li><li><p><code>-&gt;ret</code> 表示 lambda 的返回值。</p></li><li><p><code>&#123;body;&#125;</code> 表示函数体。</p></li><li><p><code>()</code> 最后的小括号则是函数的调用。</p></li></ul><p>使用 Lambda 表达式建立信号与槽：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>事实上，使用 Lambda 表达式建立信号与槽还有许多好处，之后会慢慢体现。</p><h3 id="3-QMainWindow"><a href="#3-QMainWindow" class="headerlink" title="3. QMainWindow"></a>3. QMainWindow</h3><p>QMainWindow 继承于 QWidget，为用户提供主窗口程序的类，是许多应用程序的基础，正如我正在写的 Typora 主体，就可以被称为一个 QMainWindow。其包含：</p><ul><li>菜单栏（menu bar）</li><li>工具栏（tool bar）</li><li>铆接部件（dock widget）</li><li>状态栏（status bar）</li><li>中心部件（central widget）</li></ul><p><img src="/2023/05/07/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230506113228675.png" alt="image-20230506113228675"></p><p>现在分别介绍各个部件</p><h4 id="3-1-菜单栏"><a href="#3-1-菜单栏" class="headerlink" title="3.1 菜单栏"></a>3.1 菜单栏</h4><p><img src="/2023/05/07/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230506114234425.png" alt="image-20230506114234425"></p><p>现在我们想在 qMainWindow 中实现如图效果，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建菜单栏对象</span></span><br><span class="line">QMenuBar *bar = <span class="built_in">menuBar</span>();</span><br><span class="line"><span class="comment">//将菜单栏放入主窗口中</span></span><br><span class="line"><span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"><span class="comment">//创建菜单</span></span><br><span class="line">QMenu *fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">QMenu *editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;edit&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建菜单项</span></span><br><span class="line">QAction *buildAction = fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;build&quot;</span>);</span><br><span class="line"><span class="comment">//添加分割线</span></span><br><span class="line">fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">QAction *openAction = fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;open&quot;</span>);</span><br></pre></td></tr></table></figure><p>基本的思路就是 菜单栏 -&gt; 菜单 -&gt; QAction</p><h4 id="3-2-工具栏"><a href="#3-2-工具栏" class="headerlink" title="3.2 工具栏"></a>3.2 工具栏</h4>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/05/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>很早就有创建一个个人博客站的想法，但因为各种事情搁置了。这两天心血来潮，用 hexo 框架 + butterfly 主题临时赶工了一个出来。</p><p>至于创建博客站，主要是为了写一些技术类的文章，也灌水一些生活的牢骚。如果我的某一篇技术类的文章对你有帮助，我会很开心的 ^_^</p><h3 id="关于我："><a href="#关于我：" class="headerlink" title="关于我："></a>关于我：</h3><ul><li>就读于 <a href="https://www.uestc.edu.cn/">电子科技大学</a> <a href="https://www.sp.uestc.edu.cn/">物理学院</a> 电子信息科学与技术专业</li><li>立志成为嵌入式 Linux 工程师</li><li>机器人爱好者</li><li>ACM 算法爱好者</li><li>一个逐渐退坑的二刺螈 QwQ</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
